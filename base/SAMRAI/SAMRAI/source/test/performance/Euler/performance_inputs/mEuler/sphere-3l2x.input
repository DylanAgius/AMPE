/*************************************************************************
 *
 * This file is part of the SAMRAI distribution.  For full copyright 
 * information, see COPYRIGHT and COPYING.LESSER. 
 *
 * Copyright:     (c) 1997-2012 Lawrence Livermore National Security, LLC
 * Description:   Input file for SAMRAI Euler example problem (3d sphere) 
 *
 ************************************************************************/

// 2-level Euler strong scaling performance test.
log_actions = 'n'
check_input_connectors = 'n'
check_output_connectors = 'n'
check_connectors = 'n'
print_layer_hierarchy = 'n'
DistributedLoadBalancer_print_steps = 'n'
DistributedLoadBalancer_check_connectivity = 'n'
check_map = 'n'
check_connectivity = 'n'
print_steps = 'n'
print_swap_steps = 'n'
print_break_steps = 'n'
print_edge_steps = 'n'


GlobalInputs {
   //use_new_comm_sched = FALSE  // uncomment to turn on OLD
   use_newest_comm_sched = TRUE // uncomment to turn on NEW
   //use_old_method_for_clustering = TRUE // uncomment to turn on OLD
}

Euler {
   gamma            = 1.4      // gamma = Ratio of specific heats

   godunov_order    = 4


   riemann_solve        = "APPROX_RIEM_SOLVE"
//   riemann_solve        = "EXACT_RIEM_SOLVE"
//   riemann_solve        = "HLLC_RIEM_SOLVE"

   corner_transport     = "CORNER_TRANSPORT_2"

   data_problem         = "SPHERE"

   Initial_data {
      radius            = 0.3
      center            = 2.0, 0.0, 0.0

      density_inside    = 1.0
      velocity_inside   = 0.0 , 0.0, 0.0
      pressure_inside   = 1140.35

      density_outside    = 1.0
      velocity_outside   = 0.0 , 0.0, 0.0 
      pressure_outside   = 0.00001

   }

   Refinement_data {
      refine_criteria = "PRESSURE_GRADIENT"
 
      PRESSURE_GRADIENT {
         grad_tol = 100.0
      }
 
      PRESSURE_SHOCK {
         shock_tol = 10.0
         shock_onset = 0.85
      }

      PRESSURE_DEVIATION {
         dev_tol = 0.01
        pressure_dev = 0.01
      }
   }

   // valid boundary_condition values are "FLOW", "REFLECT", "DIRICHLET"
   // valid boundary_condition values are "FLOW", "REFLECT", "DIRICHLET"
   Boundary_data {
      boundary_face_xlo {
         boundary_condition      = "REFLECT"
      }
      boundary_face_xhi {
         boundary_condition      = "REFLECT"
      }
      boundary_face_ylo {
         boundary_condition      = "REFLECT"
      }
      boundary_face_yhi {
         boundary_condition      = "REFLECT"
      }
      boundary_face_zlo {
         boundary_condition      = "REFLECT"
      }
      boundary_face_zhi {
         boundary_condition      = "REFLECT"
      }

      boundary_edge_ylo_zlo { // XFLOW, XREFLECT, XDIRICHLET not allowed
         boundary_condition      = "ZREFLECT"
      }
      boundary_edge_yhi_zlo { // XFLOW, XREFLECT, XDIRICHLET not allowed
         boundary_condition      = "ZREFLECT"
      }
      boundary_edge_ylo_zhi { // XFLOW, XREFLECT, XDIRICHLET not allowed
         boundary_condition      = "ZREFLECT"
      }
      boundary_edge_yhi_zhi { // XFLOW, XREFLECT, XDIRICHLET not allowed
         boundary_condition      = "ZREFLECT"
      }
      boundary_edge_xlo_zlo { // YFLOW, YREFLECT, YDIRICHLET not allowed
         boundary_condition      = "XREFLECT"
      }
      boundary_edge_xlo_zhi { // YFLOW, YREFLECT, YDIRICHLET not allowed
         boundary_condition      = "XREFLECT"
      }
      boundary_edge_xhi_zlo { // YFLOW, YREFLECT, YDIRICHLET not allowed
         boundary_condition      = "XREFLECT"
      }
      boundary_edge_xhi_zhi { // YFLOW, YREFLECT, YDIRICHLET not allowed
         boundary_condition      = "XREFLECT"
      }
      boundary_edge_xlo_ylo { // ZFLOW, ZREFLECT, ZDIRICHLET not allowed
         boundary_condition      = "YREFLECT"
      }
      boundary_edge_xhi_ylo { // ZFLOW, ZREFLECT, ZDIRICHLET not allowed
         boundary_condition      = "YREFLECT"
      }
      boundary_edge_xlo_yhi { // ZFLOW, ZREFLECT, ZDIRICHLET not allowed
         boundary_condition      = "YREFLECT"
      }
      boundary_edge_xhi_yhi { // ZFLOW, ZREFLECT, ZDIRICHLET not allowed
         boundary_condition      = "YREFLECT"
      }

      boundary_node_xlo_ylo_zlo {
         boundary_condition      = "XREFLECT"
      }
      boundary_node_xhi_ylo_zlo {
         boundary_condition      = "XREFLECT"
      }
      boundary_node_xlo_yhi_zlo {
         boundary_condition      = "XREFLECT"
      }
      boundary_node_xhi_yhi_zlo {
         boundary_condition      = "XREFLECT"
      }
      boundary_node_xlo_ylo_zhi {
         boundary_condition      = "XREFLECT"
      }
      boundary_node_xhi_ylo_zhi {
         boundary_condition      = "XREFLECT"
      }
      boundary_node_xlo_yhi_zhi {
         boundary_condition      = "XREFLECT"
      }
      boundary_node_xhi_yhi_zhi {
         boundary_condition      = "XREFLECT"
      }

   }

}


BergerRigoutsos {
   algo_advance_mode = "ADVANCE_SOME"
   owner_mode = "MOST_OVERLAP"
   log_node_history = FALSE
   use_level_boxes = FALSE
   use_private_communicator = TRUE
   sort_output_nodes = TRUE
   log_cluster_summary = TRUE
}

// BaselineMain is used only by the baseline code.
BaselineMain {
   base_name = "spbsl-3l2x"
   log_all_nodes = TRUE

// visualization dump parameters 
   viz_writer            = "VisIt"
   viz_dump_interval     = 0          // zero to turn off
   visit_number_procs_per_file = 1    // not used by Vizamrai

// restart dump parameters 
   restart_interval        = 0        // zero to turn off
   restart_write_dirname   = "restart_sphere3d"

   // which_br: 'o' = old, 'n' = new
   which_br = 'o'
}

// Main is used only by the new code.
Main {
   base_name = "spnew-3l2x"
   log_all_nodes = TRUE

// visualization dump parameters 
   viz_writer            = "VisIt"
   viz_dump_interval     = 0          // zero to turn off
   visit_number_procs_per_file = 1    // not used by Vizamrai

// restart dump parameters 
   restart_interval        = 0        // zero to turn off
   restart_write_dirname   = "restart_sphere3d"
}


TimerManager{
  // timer_list = "*::*::*"
  timer_list = "hier::*::*", "mesh::*::*", "xfer::*::*", "algs::*::*", "apps::*::*"
  print_user = TRUE
  // print_timer_overhead = TRUE
  print_threshold = 0
  print_summed = TRUE
  print_max = TRUE
}

CartesianGeometry {
   // domain_boxes  = [ (0, 0, 0) , (49, 49, 49) ]
   domain_boxes  = [ (0, 0, 0) , (63, 63, 63) ]
   // domain_boxes  = [ (0, 0, 0) , (7, 7, 7) ]
   x_lo          = 0.e0, 0.e0, 0.e0     // lower end of computational domain.
   x_up          = 4.e0, 4.e0, 4.e0  // upper end of computational domain.
}

StandardTagAndInitialize {
   tagging_method = "GRADIENT_DETECTOR"
}

PatchHierarchy {
   max_levels             = 3        // Maximum number of levels in hierarchy.
   ratio_to_coarser {            // vector ratio to next coarser level
      level_1             = 4 , 4 , 4 
      level_2             = 4 , 4 , 4 
      level_3             = 4 , 4 , 4 
   }

   largest_patch_size {
      level_0 =  19, 19, 19  // largest patch allowed in hierarchy
           // all finer levels will use same values as level_0...
   }

   smallest_patch_size {
      level_0 =  8, 8, 8 
      level_1 =  8, 8, 8 
      level_2 =  8, 8, 8 
      // all finer levels will use same values as level_0...
   }

   allow_patches_smaller_than_ghostwidth = TRUE
}

GriddingAlgorithm {
   efficiency_tolerance   = 0.90e0    // min % of tag cells in new patch level
   combine_efficiency     = 0.90e0    // chop box if sum of volumes of smaller
                                      // boxes < efficiency * vol of large box
   barrier_before_clustering = FALSE
   sequentialize_patch_indices = FALSE
   check_nonrefined_tags = "IGNORE"
}

HyperbolicLevelIntegrator {
   cfl                      = 0.9e0    // max cfl factor used in problem
   cfl_init                 = 0.1e0    // initial cfl factor
   lag_dt_computation       = TRUE
   use_ghosts_to_compute_dt = TRUE
   distinguish_mpi_reduction_costs = TRUE
}

TimeRefinementIntegrator {
   start_time            = 0.e0     // initial simulation time
   end_time              = 0.0500   // final simulation time
   grow_dt               = 1.1e0    // growth factor for timesteps
   max_integrator_steps  = 37     // max number of simulation timesteps
   // max_integrator_steps  = 1     // max number of simulation timesteps
}

// DistributedLoadBalancer is used by the new code.
DistributedLoadBalancer {
  report_load_balance = FALSE
}

TreeLoadBalancer {
  report_load_balance = FALSE
  barrier_before = TRUE
  barrier_after = TRUE
  n_root_cycles = 2
}

// LoadBalancer is used by the new code.
LoadBalancer {
// using default uniform load balance configuration (see mesh_LoadBalancerX.h.sed)
}
