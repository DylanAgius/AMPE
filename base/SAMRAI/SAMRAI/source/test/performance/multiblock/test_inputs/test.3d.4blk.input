/*************************************************************************
 *
 * This file is part of the SAMRAI distribution.  For full copyright 
 * information, see COPYRIGHT and COPYING.LESSER. 
 *
 * Copyright:     (c) 1997-2012 Lawrence Livermore National Security, LLC
 * Description:   Input file for SAMRAI LinAdv example problem 
 *
 ************************************************************************/

MblkGeometry {
   problem_type = "CARTESIAN"

   CartesianGeometry {
      domain_xlo_0 = 0.0, 0.0, 0.0
      domain_xhi_0 = 15.0, 10.0, 20.0
      domain_xlo_1 = 0.0, 10.0, 0.0
      domain_xhi_1 = 15.0, 20.0, 20.0
      domain_xlo_2 = 15.0, 0.0, 0.0
      domain_xhi_2 = 30.0, 10.0, 20.0
      domain_xlo_3 = 15.0, 10.0, 0.0
      domain_xhi_3 = 30.0, 20.0, 20.0
   }
}


MblkLinAdv {

   advection_velocity = 2.0e0 , 0.5e0, 1.0
   godunov_order    = 2                // order of Goduov slopes (1, 2, or 4)
   corner_transport = "CORNER_TRANSPORT_1"  

   data_problem      = "SPHERE" 

   Initial_data {
      radius            = 0.75 
      center            = 10.00 , 7.5, 4.0

      uval_inside       = 80.0
      uval_outside      = 5.0
 
   }

   Refinement_data {
      refine_criteria = "UVAL_GRADIENT", "UVAL_SHOCK"
 
      UVAL_GRADIENT {
         grad_tol = 10.0
      }
 
      UVAL_SHOCK {
         shock_tol = 10.0
         shock_onset = 0.85
      }
   }

   // valid boundary_condition values are "FLOW", "REFLECT", "DIRICHLET"
   Boundary_data {
      boundary_face_xlo {
         boundary_condition      = "FLOW"
      }
      boundary_face_xhi {
         boundary_condition      = "FLOW"
      }
      boundary_face_ylo {
         boundary_condition      = "FLOW"
      }
      boundary_face_yhi {
         boundary_condition      = "FLOW"
      }
      boundary_face_zlo {
         boundary_condition      = "FLOW"
      }
      boundary_face_zhi {
         boundary_condition      = "FLOW"
      }

      boundary_edge_ylo_zlo { // XFLOW, XREFLECT, XDIRICHLET not allowed
         boundary_condition      = "ZFLOW"
      }
      boundary_edge_yhi_zlo { // XFLOW, XREFLECT, XDIRICHLET not allowed
         boundary_condition      = "ZFLOW"
      }
      boundary_edge_ylo_zhi { // XFLOW, XREFLECT, XDIRICHLET not allowed
         boundary_condition      = "ZFLOW"
      }
      boundary_edge_yhi_zhi { // XFLOW, XREFLECT, XDIRICHLET not allowed
         boundary_condition      = "ZFLOW"
      }
      boundary_edge_xlo_zlo { // YFLOW, YREFLECT, YDIRICHLET not allowed
         boundary_condition      = "XFLOW"
      }
      boundary_edge_xlo_zhi { // YFLOW, YREFLECT, YDIRICHLET not allowed
         boundary_condition      = "XFLOW"
      }
      boundary_edge_xhi_zlo { // YFLOW, YREFLECT, YDIRICHLET not allowed
         boundary_condition      = "XFLOW"
      }
      boundary_edge_xhi_zhi { // YFLOW, YREFLECT, YDIRICHLET not allowed
         boundary_condition      = "XFLOW"
      }
      boundary_edge_xlo_ylo { // ZFLOW, ZREFLECT, ZDIRICHLET not allowed
         boundary_condition      = "YFLOW"
      }
      boundary_edge_xhi_ylo { // ZFLOW, ZREFLECT, ZDIRICHLET not allowed
         boundary_condition      = "YFLOW"
      }
      boundary_edge_xlo_yhi { // ZFLOW, ZREFLECT, ZDIRICHLET not allowed
         boundary_condition      = "YFLOW"
      }
      boundary_edge_xhi_yhi { // ZFLOW, ZREFLECT, ZDIRICHLET not allowed
         boundary_condition      = "YFLOW"
      }


      boundary_node_xlo_ylo_zlo {
         boundary_condition      = "XFLOW"
      }
      boundary_node_xhi_ylo_zlo {
         boundary_condition      = "XFLOW"
      }
      boundary_node_xlo_yhi_zlo {
         boundary_condition      = "XFLOW"
      }
      boundary_node_xhi_yhi_zlo {
         boundary_condition      = "XFLOW"
      }
      boundary_node_xlo_ylo_zhi {
         boundary_condition      = "XFLOW"
      }
      boundary_node_xhi_ylo_zhi {
         boundary_condition      = "XFLOW"
      }
      boundary_node_xlo_yhi_zhi {
         boundary_condition      = "XFLOW"
      }
      boundary_node_xhi_yhi_zhi {
         boundary_condition      = "XFLOW"
      }


   }

}

Main {
   dim = 3
// log file parameters 
   log_file_name    = "newtest.log"
   log_all_nodes    = TRUE

// visualization dump parameters 
   viz_writer            = "VisIt" // use: "Vizamrai", "VisIt" for both
   viz_dump_interval     = 0          // zero to turn off
   viz_dump_dirname      = "viz_newtest"
   viz_dump_filename     = "newtest"    // not used by VisIt
   visit_number_procs_per_file = 1    // not used by Vizamrai


// restart dump parameters
   restart_interval       = 0         // zero to turn off
   restart_write_dirname  = "restart_newtest"

   timestepping = "SYNCHRONIZED"
}

TimerManager {
   timer_list               = "apps::*::*",
                              "algs::*::*",
                              "mesh::*::*"
//   print_exclusive      = TRUE
   print_summed           = TRUE
   print_max              = TRUE
//   print_timer_overhead   = TRUE
   print_threshold        = 0.0
}


BlockGeometry {
   num_blocks = 4
   domain_boxes_0 = [ (0,0,0) , (14,9,19) ]
   domain_boxes_1 = [ (0,0,0) , (14,9,19) ]
   domain_boxes_2 = [ (0,0,0) , (14,9,19) ]
   domain_boxes_3 = [ (0,0,0) , (14,9,19) ]

   BlockNeighbors0 {
      block_a = 0
      block_b = 1

      rotation_b_to_a = "I_UP", "J_UP", "K_UP"
      point_in_a_space = 0, 10, 0
      point_in_b_space = 0, 0, 0
   }

   BlockNeighbors1 {
      block_a = 0
      block_b = 2

      rotation_b_to_a = "I_UP", "J_UP", "K_UP"
      point_in_a_space = 15, 0, 0
      point_in_b_space = 0, 0, 0
   }

   BlockNeighbors2 {
      block_a = 0
      block_b = 3

      rotation_b_to_a = "I_UP", "J_UP", "K_UP"
      point_in_a_space = 15, 10, 0
      point_in_b_space = 0, 0, 0
   }

   BlockNeighbors3 {
      block_a = 1
      block_b = 2

      rotation_b_to_a = "I_UP", "J_UP", "K_UP"
      point_in_a_space = 15, -1, 0
      point_in_b_space = 0, 9, 0
   }

   BlockNeighbors4 {
      block_a = 1
      block_b = 3

      rotation_b_to_a = "I_UP", "J_UP", "K_UP"
      point_in_a_space = 15, 0, 0
      point_in_b_space = 0, 0, 0
   }

   BlockNeighbors5 {
      block_a = 2
      block_b = 3

      rotation_b_to_a = "I_UP", "J_UP", "K_UP"
      point_in_a_space = 0, 10, 0
      point_in_b_space = 0, 0, 0
   }
}

PatchHierarchy {
   max_levels = 3         // Maximum number of levels in hierarchy.
   ratio_to_coarser {      // vector ratio to next coarser level
      level_1 = 4 , 4, 4 
      level_2 = 4 , 4, 4
      level_3 = 4 , 4, 4
   }
   largest_patch_size {
      level_0 = 200 , 200, 200
      // all finer levels will use same values as level_0...
   }
   smallest_patch_size {
      level_0 = 10 , 10, 10
      // all finer levels will use same values as level_0...
   }
}






GriddingAlgorithm{
   sequentialize_patch_indices = TRUE

   efficiency_tolerance    = 0.85e0   // min % of tag cells in new patch level
   combine_efficiency      = 0.95e0   // chop box if sum of volumes of smaller
                                      // boxes < efficiency * vol of large box
}

StandardTagAndInitialize {
   tagging_method = "GRADIENT_DETECTOR"
}

HyperbolicLevelIntegrator{
   cfl                       = 0.9e0    // max cfl factor used in problem
   cfl_init                  = 0.9e0    // initial cfl factor
   lag_dt_computation        = TRUE
   use_ghosts_to_compute_dt  = TRUE
}

TimeRefinementIntegrator{
   start_time           = 0.e0     // initial simulation time
   end_time             = 100.e0   // final simulation time
   grow_dt              = 1.1e0    // growth factor for timesteps
   max_integrator_steps = 200     // max number of simulation timesteps
   regrid_interval      = 2
}

TreeLoadBalancer {
}
