/*************************************************************************
 *
 * This file is part of the SAMRAI distribution.  For full copyright
 * information, see COPYRIGHT and COPYING.LESSER.
 *
 * Copyright:     (c) 1997-2012 Lawrence Livermore National Security, LLC
 * Description:   Input file for FAC solver tests.
 *
 ************************************************************************/

Main {
  dim = 3
  base_name = "varcoef3d"
  do_plot = TRUE
  max_cycles = 15
  residual_tol = 1e-10
  pre_sweeps = 1
  post_sweeps = 3
  max_adaptions = 2
  target_l2norm = 3.8e-3
}

AdaptivePoisson {
  problem_name = "gauss-coef"
    // finest_dbg_plot_ln = 0
  ScalarPoissonOps {
    enable_logging = TRUE
    coarse_solver_choice = "hypre"
    coarse_solver_tolerance = 1e-14
    coarse_solver_max_iterations = 10
    smoothing_choice = "redblack"
    cf_discretization = "Ewing"
    prolongation_method = "LINEAR_REFINE"
  }
  gaussian_diffcoef_solution {
    GaussianFcnControl = "{ lambda=0 cx=0.5 cy=0.5 cz=0.5 }"
    SinusoidFcnControl = "{ nx=1.0 px=0.0 ny=1.0 py=0.0 nz=1.0 pz=0.0 }"
  }
  adaption_threshold = .15
}


CartesianGridGeometry {
  domain_boxes = [(0,0,0), (9,9,9)]
  x_lo         = 0, 0, 0
  x_up         = 1, 1, 1.5
}

StandardTagAndInitialize {
  tagging_method = "GRADIENT_DETECTOR"
}

TreeLoadBalancer {
  report_load_balance = TRUE
  barrier_before = FALSE
  barrier_after = FALSE
  n_root_cycles = 1
}

PatchHierarchy {
   max_levels = 5
   largest_patch_size {
      level_0 = 16,16,16
      // all finer levels will use same values as level_0...
   }
   smallest_patch_size {
      level_0 = 4,4,4
      // all finer levels will use same values as level_0...
   }
   ratio_to_coarser {
      level_1            = 2, 2, 2
      level_2            = 2, 2, 2
      level_3            = 2, 2, 2
      level_4            = 2, 2, 2
      level_5            = 2, 2, 2
      level_6            = 2, 2, 2
      level_7            = 2, 2, 2
      level_8            = 2, 2, 2
      level_9            = 2, 2, 2
      //  etc.
   }
   allow_patches_smaller_than_ghostwidth = TRUE
   allow_patches_smaller_than_minimum_size_to_prevent_overlaps = TRUE
}

GriddingAlgorithm {
   enforce_proper_nesting = TRUE
   extend_to_domain_boundary = TRUE
   // load_balance = FALSE
   combine_efficiency = 0.88
   efficiency_tolerance = 0.88
   // write_regrid_boxes = TRUE
   // read_regrid_boxes = TRUE
   // regrid_boxes_filename = "grid"
   check_nonrefined_tags = "IGNORE"
   extend_tags_to_bdry = TRUE
   sequentialize_patch_indices = TRUE
   coalesce_boxes = FALSE
}

TimerManager{
  timer_list = "solv::FACPreconditionerX::*", "solv::ScalarPoissonFacOpsX::*", "solv::CartesianRobinBcHelperX::setBoundaryValuesInCells()_setBcCoefs()"
  print_user = TRUE
  // print_timer_overhead = TRUE
}
