#########################################################################
##
## This file is part of the SAMRAI distribution.  For full copyright 
## information, see COPYRIGHT and COPYING.LESSER. 
##
## Copyright:     (c) 1997-2012 Lawrence Livermore National Security, LLC
## Description:   makefile for linear advection sample application 
##
#########################################################################

SAMRAI        = @top_srcdir@
SRCDIR        = @srcdir@
SUBDIR        = source/test/applications/LinAdv
VPATH         = @srcdir@
TESTTOOLS     = ../../testtools
OBJECT        = ../../../..

default: check	

include $(OBJECT)/config/Makefile.config

AUTOTEST      = $(SAMRAI)/source/test/applications
CPPFLAGS_EXTRA= -I$(AUTOTEST) -DTESTING=1 

NUM_TESTS = 10

TEST_NPROCS = @TEST_NPROCS@

CXX_OBJS      = main.o LinAdv.o AutoTester.o
F_OBJS        = flux2d.o grad2d.o init2d.o stable2d.o stufprobc.o trace1d.o trace2d.o flux3d.o init3d.o grad3d.o trace3d.o stable3d.o fluxcorner3d.o

main:		$(CXX_OBJS) $(F_OBJS) $(LIBSAMRAIDEPEND)
		$(CXX) $(CXXFLAGS) $(LDFLAGS) $(CXX_OBJS) $(F_OBJS)	\
		$(LIBSAMRAI3D) $(LIBSAMRAI) $(LDLIBS) -o main

check:
		$(MAKE) check2d
		$(MAKE) check3d

# WARNING: Checking of the redistribute routine is a bit of a problem since it needs only a single run 
#          to have been done.  So remove the old stuff.
check2d:	main
		$(OBJECT)/config/serpa-run $(TEST_NPROCS) ./main test_inputs/test.2d.input;
		$(RM) -rf  test.2d.restart/restore.000003/nodes.*[2-9]
		$(OBJECT)/tools/restart/restart-redistribute test.2d.restart test_restart_redistribute_2d 3 4;
		$(OBJECT)/config/serpa-run $(TEST_NPROCS) ./main test_inputs/test.2d.input test.2d.restart 5;
		$(OBJECT)/config/serpa-run $(TEST_NPROCS) ./main test_inputs/test_sync.2d.input;
		$(OBJECT)/config/serpa-run $(TEST_NPROCS) ./main test_inputs/test_sync.2d.input test_sync.2d.restart 5;
		$(OBJECT)/config/serpa-run $(TEST_NPROCS) ./main test_inputs/test_sync_restart.2d.input;
		$(OBJECT)/config/serpa-run $(TEST_NPROCS) ./main test_inputs/test_sync_restart.2d.input test_sync_restart.2d.restart 5

check3d:	main
		$(OBJECT)/config/serpa-run $(TEST_NPROCS) ./main test_inputs/test.3d.input;
		$(OBJECT)/config/serpa-run $(TEST_NPROCS) ./main test_inputs/test.3d.input test.3d.restart 5;
		$(OBJECT)/config/serpa-run $(TEST_NPROCS) ./main test_inputs/test_sync.3d.input;
		$(OBJECT)/config/serpa-run $(TEST_NPROCS) ./main test_inputs/test_sync.3d.input test_sync.3d.restart 5

checkcompile: main

checktest:
		rm -f makecheck.logfile
		$(MAKE) check 2>&1 | $(TEE) makecheck.logfile
		$(TESTTOOLS)/testcount.sh $(TEST_NPROCS) $(NUM_TESTS) makecheck.logfile
		rm -f makecheck.logfile

clean-check:
		$(SAMCLEAN)

clean:		clean-check
		$(RM) *.f *main* 
		$(RM) -rf test*restart*
		$(RM) -rf viz*

include $(SRCDIR)/Makefile.depend

FORTRAN       = $(SRCDIR)/fortran/$(PDIM)d
M4DIRS        = -DFORTDIR=$(SRCDIR)/fortran $(SAMRAI_M4_FLAGS)

AutoTester.o:	$(AUTOTEST)/AutoTester.C
		$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c  $(AUTOTEST)/AutoTester.C \
		-o $@

flux2d.o:	fortran/flux2d.m4
		$(M4) $(M4DIRS) $(SRCDIR)/fortran/flux2d.m4 > flux2d.f
		$(F77) $(FFLAGS) -c flux2d.f -o $@

flux3d.o:	fortran/flux3d.m4
		$(M4) $(M4DIRS) $(SRCDIR)/fortran/flux3d.m4 > flux3d.f
		$(F77) $(FFLAGS) -c flux3d.f -o $@

fluxcorner3d.o:	fortran/fluxcorner3d.m4
		$(M4) $(M4DIRS) $(SRCDIR)/fortran/fluxcorner3d.m4 > fluxcorner3d.f
		$(F77) $(FFLAGS) -c fluxcorner3d.f -o $@

grad2d.o:	fortran/grad2d.m4
		$(M4) $(M4DIRS) $(SRCDIR)/fortran/grad2d.m4 > grad2d.f
		$(F77) $(FFLAGS) -c grad2d.f -o $@

grad3d.o:	fortran/grad3d.m4
		$(M4) $(M4DIRS) $(SRCDIR)/fortran/grad3d.m4 > grad3d.f
		$(F77) $(FFLAGS) -c grad3d.f -o $@

init2d.o:	fortran/init2d.m4
		$(M4) $(M4DIRS) $(SRCDIR)/fortran/init2d.m4 > init2d.f
		$(F77) $(FFLAGS) -c init2d.f -o $@

init3d.o:	fortran/init3d.m4
		$(M4) $(M4DIRS) $(SRCDIR)/fortran/init3d.m4 > init3d.f
		$(F77) $(FFLAGS) -c init3d.f -o $@

stable2d.o:	fortran/stable2d.m4
		$(M4) $(M4DIRS) $(SRCDIR)/fortran/stable2d.m4 > stable2d.f
		$(F77) $(FFLAGS) -c stable2d.f -o $@

stable3d.o:	fortran/stable3d.m4
		$(M4) $(M4DIRS) $(SRCDIR)/fortran/stable3d.m4 > stable3d.f
		$(F77) $(FFLAGS) -c stable3d.f -o $@

stufprobc.o:	fortran/stufprobc.m4
		$(M4) $(M4DIRS) $(SRCDIR)/fortran/stufprobc.m4 > stufprobc.f
		$(F77) $(FFLAGS) -c stufprobc.f -o $@

trace2d.o:	fortran/trace2d.m4
		$(M4) $(M4DIRS) $(SRCDIR)/fortran/trace2d.m4 > trace2d.f
		$(F77) $(FFLAGS) -c trace2d.f -o $@

trace3d.o:	fortran/trace3d.m4
		$(M4) $(M4DIRS) $(SRCDIR)/fortran/trace3d.m4 > trace3d.f
		$(F77) $(FFLAGS) -c trace3d.f -o $@

trace1d.o:	fortran/trace1d.m4
		$(M4) $(M4DIRS) $(SRCDIR)/fortran/trace1d.m4 > trace1d.f
		$(F77) $(FFLAGS) -c trace1d.f -o $@
