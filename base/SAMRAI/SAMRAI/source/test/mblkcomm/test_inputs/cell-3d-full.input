/*************************************************************************
 *
 * This file is part of the SAMRAI distribution.  For full copyright 
 * information, see COPYRIGHT and COPYING.LESSER. 
 *
 * Copyright:     (c) 1997-2012 Lawrence Livermore National Security, LLC
 * Description:   input file for testing communication of SAMRAI cell data. 
 *
 ************************************************************************/

Main {
    dim = 3
//
// Log file information
//
    log_file_name  = "cell-test.log"
    log_all_nodes  = TRUE

//
// Testing information, including number of times to perform schedule
// creation and communication processes, name of particular patch data
// test, and refine and coarsen test information
//    
    ntimes_run = 1  // default is 1

//
// Available tests are:
// 
    test_to_run = "CellMultiblockTest"
//  test_to_run = "EdgeDataTest"
//  test_to_run = "FaceDataTest"
//  test_to_run = "NodeDataTest"
//  test_to_run = "SideDataTest"
//  test_to_run = "MultiVariableDataTest"

//  
// Either refine test or coarsen test can be run, but not both.  This 
// ensures proper validation of communicated data.  Default test is 
// to refine refine data with interior patch data filled from same level.
// If `do_refine' is true, then refine test will occur and coarsen test
// will not.  Refine test also allows option of filling patch interiors 
// from coarser levels.  Coarsen test has no options as coarse patch 
// interiors will always be filled with coarsened data from finer level.
//
    do_refine = TRUE
    refine_option = "INTERIOR_FROM_SAME_LEVEL"
 
    do_coarsen = FALSE
}

TimerManager {
    timer_list = "test::main::*"

// Available timers are:
//
//   "test::main::createRefineSchedule"
//   "test::main::performRefineOperations"
//   "test::main::createCoarsenSchedule"
//   "test::main::performCoarsenOperations"
//
    
}

CellMultiblockTest {

   //
   // Anything specific to the test goes here...
   //
   // e.g., coefficients for linear function to interpolate
   //          Ax + By + Cz + D = f(x,y,z)
   //          (NOTE: f(x,y,z) is the value assigned to each 
   //                 array value at initialization and 
   //                 against which interpolation is tested) 
   //   
   Acoef = 2.1
   Bcoef = 3.2
   Ccoef = 4.3
   Dcoef = 5.4

   //
   // The VariableData database is read in by the PatchDataTestStrategy
   // base class.  Each sub-database must contain variable parameter data.
   // The name of the sub-databases for each variable is arbitrary.  But
   // the names must be distinct.  
   // 
   //    Required input:  name
   //    Optional input:  depth              (default = 1)
   //                     src_ghosts         (default = 0,0,0)
   //                     dst_ghosts         (default = 0,0,0)
   //                     coarsen_operator   (default = "NO_COARSEN")
   //                     refine_operator    (default = "NO_REFINE")
   //
   VariableData {

      variable_1 {
         src_name = "src_var1"
         dst_name = "dst_var1"
         depth = 1
         src_ghosts = 0,0,0
         dst_ghosts = 1,1,1
         coarsen_operator = "NO_COARSEN"
         refine_operator = "NO_REFINE"
      }
   }

   RefinementData {
   }

}

BlockGridGeometry {
   num_blocks = 7
   domain_boxes_0 = [ (0,0,0) , (14,14,14) ]
   domain_boxes_1 = [ (0,0,0) , (14,14,14) ]
   domain_boxes_2 = [ (0,0,0) , (14,14,14) ]
   domain_boxes_3 = [ (0,0,0) , (14,14,14) ]
   domain_boxes_4 = [ (0,0,0) , (14,14,14) ]
   domain_boxes_5 = [ (0,0,0) , (14,14,14) ]
   domain_boxes_6 = [ (0,0,0) , (14,14,14) ]

   Singularity0 {
      blocks = 0,1,2

      sing_box_0 = [(15,15,0),(15,15,14)]
      sing_box_1 = [(15,-1,0),(15,-1,14)]
      sing_box_2 = [(-1,-1,0),(-1,-1,14)]
   }

   Singularity1 {
      blocks = 0,1,3

      sing_box_0 = [(0,15,15),(14,15,15)]
      sing_box_1 = [(0,-1,15),(14,-1,15)]
      sing_box_3 = [(0,-1,-1),(14,-1,-1)]
   }
 
   Singularity2 {
      blocks = 0,1,4

      sing_box_0 = [(0,15,-1),(14,15,-1)]
      sing_box_1 = [(0,-1,-1),(14,-1,-1)]
      sing_box_4 = [(0,-1,15),(14,-1,15)]
   }
 
   Singularity3 {
      blocks = 0,1,6

      sing_box_0 = [(-1,15,0),(-1,15,14)]
      sing_box_1 = [(-1,-1,0),(-1,-1,14)]
      sing_box_6 = [(15,-1,0),(15,-1,14)]
   }
 
   Singularity4 {
      blocks = 0,2,3

      sing_box_0 = [(15,0,15),(15,14,15)]
      sing_box_2 = [(0,-1,15),(14,-1,15)]
      sing_box_3 = [(15,-1,0),(15,-1,14)]
   }
 
   Singularity5 {
      blocks = 0,2,4

      sing_box_0 = [(15,0,-1),(15,14,-1)]
      sing_box_2 = [(0,-1,-1),(14,-1,-1)]
      sing_box_4 = [(15,-1,0),(15,-1,14)]
   }
 
   Singularity6 {
      blocks = 0,2,5

      sing_box_0 = [(15,-1,0),(15,-1,14)]
      sing_box_2 = [(15,-1,0),(15,-1,14)]
      sing_box_5 = [(15,-1,0),(15,-1,14)]
   }
 
   Singularity7 {
      blocks = 0,3,5

      sing_box_0 = [(0,-1,15),(14,-1,15)]
      sing_box_3 = [(0,-1,15),(14,-1,15)]
      sing_box_5 = [(0,-1,-1),(14,-1,-1)]
   }
 
   Singularity8 {
      blocks = 0,3,6

      sing_box_0 = [(-1,0,15),(-1,14,15)]
      sing_box_3 = [(-1,-1,0),(-1,-1,14)]
      sing_box_6 = [(0,-1,15),(14,-1,15)]
   }
 
   Singularity9 {
      blocks = 0,4,5

      sing_box_0 = [(0,-1,-1),(14,-1,-1)]
      sing_box_4 = [(0,-1,-1),(14,-1,-1)]
      sing_box_5 = [(0,-1,15),(14,-1,15)]
   }
 
   Singularity10 {
      blocks = 0,4,6

      sing_box_0 = [(-1,0,-1),(-1,14,-1)]
      sing_box_4 = [(-1,-1,0),(-1,-1,14)]
      sing_box_6 = [(0,-1,-1),(14,-1,-1)]
   }
 
   Singularity11 {
      blocks = 0,5,6

      sing_box_0 = [(-1,-1,0),(-1,-1,14)]
      sing_box_5 = [(-1,-1,0),(-1,-1,14)]
      sing_box_6 = [(-1,-1,0),(-1,-1,14)]
   }
 
   Singularity12 {
      blocks = 1,2,3

      sing_box_1 = [(15,0,15),(15,14,15)]
      sing_box_2 = [(-1,0,15),(-1,14,15)]
      sing_box_3 = [(15,0,-1),(15,14,-1)]
   }
 
   Singularity13 {
      blocks = 1,2,4

      sing_box_1 = [(15,0,-1),(15,14,-1)]
      sing_box_2 = [(-1,0,-1),(-1,14,-1)]
      sing_box_4 = [(15,0,15),(15,14,15)]
   }
 
   Singularity14 {
      blocks = 1,3,6

      sing_box_1 = [(-1,0,15),(-1,14,15)]
      sing_box_3 = [(-1,0,-1),(-1,14,-1)]
      sing_box_6 = [(15,0,15),(15,14,15)]
   }
 
   Singularity15 {
      blocks = 1,4,6

      sing_box_1 = [(-1,0,-1),(-1,14,-1)]
      sing_box_4 = [(-1,0,15),(-1,14,15)]
      sing_box_6 = [(15,0,-1),(15,14,-1)]
   }
 
   Singularity16 {
      blocks = 2,3,5

      sing_box_2 = [(15,0,15),(15,14,15)]
      sing_box_3 = [(15,0,15),(15,14,15)]
      sing_box_5 = [(15,0,-1),(15,14,-1)]
   }
 
   Singularity17 {
      blocks = 2,4,5

      sing_box_2 = [(15,0,-1),(15,14,-1)]
      sing_box_4 = [(15,0,-1),(15,14,-1)]
      sing_box_5 = [(15,0,15),(15,14,15)]
   }
 
   Singularity18 {
      blocks = 3,5,6

      sing_box_3 = [(-1,0,15),(-1,14,15)]
      sing_box_5 = [(-1,0,-1),(-1,14,-1)]
      sing_box_6 = [(-1,0,15),(-1,14,15)]
   }
 
   Singularity19 {
      blocks = 4,5,6

      sing_box_4 = [(-1,0,-1),(-1,14,-1)]
      sing_box_5 = [(-1,0,15),(-1,14,15)]
      sing_box_6 = [(-1,0,-1),(-1,14,-1)]
   }
 
   Singularity20 {
      blocks = 0,1,2,3

      sing_box_0 = [(15,15,15),(15,15,15)]
      sing_box_1 = [(15,-1,15),(15,-1,15)]
      sing_box_2 = [(-1,-1,15),(-1,-1,15)]
      sing_box_3 = [(15,-1,-1),(15,-1,-1)]
   }
 
   Singularity21 {
      blocks = 0,1,2,4

      sing_box_0 = [(15,15,-1),(15,15,-1)]
      sing_box_1 = [(15,-1,-1),(15,-1,-1)]
      sing_box_2 = [(-1,-1,-1),(-1,-1,-1)]
      sing_box_4 = [(15,-1,15),(15,-1,15)]
   }

   Singularity22 {
      blocks = 0,1,3,6

      sing_box_0 = [(-1,15,15),(-1,15,15)]
      sing_box_1 = [(-1,-1,15),(-1,-1,15)]
      sing_box_3 = [(-1,-1,-1),(-1,-1,-1)]
      sing_box_6 = [(15,-1,15),(15,-1,15)]
   }

   Singularity23 {
      blocks = 0,1,4,6

      sing_box_0 = [(-1,15,-1),(-1,15,-1)]
      sing_box_1 = [(-1,-1,-1),(-1,-1,-1)]
      sing_box_4 = [(-1,-1,15),(-1,-1,15)]
      sing_box_6 = [(15,-1,-1),(15,-1,-1)]
   }

   Singularity24 {
      blocks = 0,2,3,5

      sing_box_0 = [(15,-1,15),(15,-1,15)]
      sing_box_2 = [(15,-1,15),(15,-1,15)]
      sing_box_3 = [(15,-1,15),(15,-1,15)]
      sing_box_5 = [(15,-1,-1),(15,-1,-1)]
   }

   Singularity25 {
      blocks = 0,2,4,5

      sing_box_0 = [(15,-1,-1),(15,-1,-1)]
      sing_box_2 = [(15,-1,-1),(15,-1,-1)]
      sing_box_4 = [(15,-1,-1),(15,-1,-1)]
      sing_box_5 = [(15,-1,15),(15,-1,15)]
   }

   Singularity26 {
      blocks = 0,3,5,6

      sing_box_0 = [(-1,-1,15),(-1,-1,15)]
      sing_box_3 = [(-1,-1,15),(-1,-1,15)]
      sing_box_5 = [(-1,-1,-1),(-1,-1,-1)]
      sing_box_6 = [(-1,-1,15),(-1,-1,15)]
   }

   Singularity27 {
      blocks = 0,4,5,6

      sing_box_0 = [(-1,-1,-1),(-1,-1,-1)]
      sing_box_4 = [(-1,-1,-1),(-1,-1,-1)]
      sing_box_5 = [(-1,-1,15),(-1,-1,15)]
      sing_box_6 = [(-1,-1,-1),(-1,-1,-1)]
   }


 
   BlockNeighbors0 {
      block_a = 0
      block_b = 1

      rotation_b_to_a = "I_UP", "J_UP", "K_UP"
      point_in_a_space = 0,14,0
      point_in_b_space = 0,-1,0
   }

   BlockNeighbors1 {
      block_a = 0
      block_b = 2

      rotation_b_to_a = "J_UP", "I_DOWN", "K_UP"
      point_in_a_space = 14,0,0
      point_in_b_space = 14,-1,0

   }

   BlockNeighbors2 {
      block_a = 0
      block_b = 3

      rotation_b_to_a = "I_UP", "K_DOWN", "J_UP"
      point_in_a_space = 14,14,14
      point_in_b_space = 14,-1,0
   }

   BlockNeighbors3 {
      block_a = 0
      block_b = 4

      rotation_b_to_a = "I_UP", "K_UP", "J_DOWN"
      point_in_a_space = 0,0,0
      point_in_b_space = 0,-1,0
   }

   BlockNeighbors4 {
      block_a = 0
      block_b = 5

      rotation_b_to_a = "I_UP", "J_DOWN", "K_DOWN"
      point_in_a_space = 0,0,0
      point_in_b_space = 0,-1,14
   }

   BlockNeighbors5 {
      block_a = 1
      block_b = 2

      rotation_b_to_a = "I_UP", "J_UP", "K_UP"
      point_in_a_space = 14,14,14
      point_in_b_space = -1,14,14
   }

   BlockNeighbors6 {
      block_a = 1
      block_b = 3

      rotation_b_to_a = "I_UP", "J_UP", "K_UP"
      point_in_a_space = 14,14,14
      point_in_b_space = 14,14,-1
   }

   BlockNeighbors7 {
      block_a = 1
      block_b = 4

      rotation_b_to_a = "I_UP", "J_UP", "K_UP"
      point_in_a_space = 0,0,0
      point_in_b_space = 0,0,15
   }

   BlockNeighbors8 {
      block_a = 1
      block_b = 6

      rotation_b_to_a = "I_UP", "J_UP", "K_UP"
      point_in_a_space = 0,0,0
      point_in_b_space = 15,0,0
   }

   BlockNeighbors9 {
      block_a = 2
      block_b = 3

      rotation_b_to_a = "K_UP", "J_UP", "I_DOWN"
      point_in_a_space = 0,0,14
      point_in_b_space = 15,0,0
   }

   BlockNeighbors10 {
      block_a = 2
      block_b = 4

      rotation_b_to_a = "K_DOWN", "J_UP", "I_UP"
      point_in_a_space = 0,0,0
      point_in_b_space = 15,0,14
   }

   BlockNeighbors11 {
      block_a = 2
      block_b = 5

      rotation_b_to_a = "I_DOWN", "J_UP", "K_DOWN"
      point_in_a_space = 14,0,14
      point_in_b_space = 15,0,0
   }

   BlockNeighbors12 {
      block_a = 3
      block_b = 5

      rotation_b_to_a = "I_UP", "J_UP", "K_UP"
      point_in_a_space = 14,0,14
      point_in_b_space = 14,0,-1
   }

   BlockNeighbors13 {
      block_a = 3
      block_b = 6

      rotation_b_to_a = "K_UP", "J_UP", "I_DOWN"
      point_in_a_space = 0,0,14
      point_in_b_space = 0,0,15
   }

   BlockNeighbors14 {
      block_a = 4
      block_b = 5

      rotation_b_to_a = "I_UP", "J_UP", "K_UP"
      point_in_a_space = 0,0,0
      point_in_b_space = 0,0,15
   }

   BlockNeighbors15 {
      block_a = 4
      block_b = 6

      rotation_b_to_a = "K_DOWN", "J_UP", "I_UP"
      point_in_a_space = 0,0,0
      point_in_b_space = 0,0,-1
   }

   BlockNeighbors16 {
      block_a = 5
      block_b = 6

      rotation_b_to_a = "I_DOWN", "J_UP", "K_DOWN"
      point_in_a_space = 0,0,0
      point_in_b_space = -1,0,14
   }

}

PatchHierarchy {
   max_levels              = 2 // Maximum number of levels in hierarchy.
   ratio_to_coarser {         // vector ratio to next coarser level
      level_1               =  2 , 2 , 2
      level_2               =  2 , 2 , 2
   }
   largest_patch_size {
      level_0 = 40, 40, 40
      // all finer levels will use same values as level_0...
   }
   smallest_patch_size {
      level_0 = 2, 2, 2
      // all finer levels will use same values as level_0...
   }
}



GriddingAlgorithm {

   efficiency_tolerance     = 0.70e0   // min % of tag cells in new patch level
   combine_efficiency       = 0.85e0   // chop box if sum of volumes of smaller
                                       // boxes < efficiency * vol of large box
}

TreeLoadBalancer {
// processors      = 1 , 1 
   use_spatial_bin_pack = TRUE
}

StandardTaggingAndInitializer {
   tagging_method = "REFINE_BOXES"

   RefineBoxes {
      level_0 = [ (5,5,5) , (6,7,7) ]
   }

}
